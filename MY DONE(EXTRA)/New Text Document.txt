int countDigits( int num )
{
	int count = 1;
	while (10 <= num){
		num = num / 10;
		count++;
	}
	
	//printf("\n%d digits\n", count);
	/* your code comes here */
	return(count);
}


int nthDigitBack( int n, int num )
{
	int nth;
	int count = 0;
	while (count < n){
		num = num / 10;
		count++;
	}
	nth = num % 10;
	
	//printf("digit %d from right is %d", n, nth);
	return(nth);
}


int nthDigit( int n, int num )
{
	int n2 = countDigits(num) - n - 1;//-1 beacuase the count digits return the exact number of digits while the other functions have index numbers starting from zero....
	if (n2 < 0){
		return 0;
	}
	else{
		return nthDigitBack(n2, num);
	}
		
	
	//printf("\n\n\ndigit %d from left is %d", n, nth);
	

	
}


int nthDigitTallyOne( int n, int num, int tally[] )
{
	int tally_no_to_be_updated = nthDigit(n, num);
	tally[tally_no_to_be_updated]++;
	//printf("\n\n\n ubdated with respect to digit no %d of %d which was %d\n\n", n, num, tally_no_to_be_updated);
	
	/*
	for (int i = 0; i < 10; i++)
	{
		int print_term = tally[i];
		printf("\t%d", print_term);
	}
	*/
	return(*tally);
}


int* nthDigitTally( int n, int len, int nums[] )
{
	int tally[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

	for (int i = 0; i < len; i++)
	{
		*tally = nthDigitTallyOne(n, nums[i], tally);
		
		//printing
		/*
		for (int j = 0; j < 10; j++)0
		{
			int print_term = tally[j];
			printf("\n\t%d", print_term);
		}*/
	}
	
	
	
	return(&tally);
}